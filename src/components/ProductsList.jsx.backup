import React, { useState, useRef, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { motion } from "framer-motion";
import {
  Box,
  Text,
  Heading,
  Flex,
  Button,
  Grid,
  useBreakpointValue,
} from "@chakra-ui/react";
import Card from "./Card";
import Loader from "./Loader";
import Pagination from "./Pagination";
import Filters from "./Filters";

import { sampleGlassesProducts } from "./sampleClothingProducts";

const ProductsList = () => {
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [category, setCategory] = useState("");
  const [priceSort, setPriceSort] = useState("");
  const [stockStatus, setStockStatus] = useState("");
  const [products, setProducts] = useState([]);
  const [totalPages, setTotalPages] = useState(0);
  const [totalProducts, setTotalProducts] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const topRef = useRef(null);

  const currentPage = parseInt(searchParams.get("page") || "1");

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, [currentPage]);

  const fetchStaticProducts = () => {
    setIsLoading(true);
    let filteredProducts = [...sampleGlassesProducts];
    if (category)
      filteredProducts = filteredProducts.filter(
        (p) => p.category === category.toLowerCase()
      );
    if (stockStatus)
      filteredProducts = filteredProducts.filter(
        (p) => p.stockStatus === stockStatus
      );
    if (priceSort === "asc") filteredProducts.sort((a, b) => a.price - b.price);
    else if (priceSort === "desc")
      filteredProducts.sort((a, b) => b.price - a.price);
    const itemsPerPage = 8;
    const startIndex = (currentPage - 1) * itemsPerPage;
    const paginatedProducts = filteredProducts.slice(
      startIndex,
      startIndex + itemsPerPage
    );
    setProducts(paginatedProducts);
    setTotalProducts(filteredProducts.length);
    setTotalPages(Math.ceil(filteredProducts.length / itemsPerPage));
    setIsLoading(false);
  };

  useEffect(() => {
    fetchStaticProducts();
  }, [currentPage, category, priceSort, stockStatus]);

  const togglePopup = () => setIsPopupOpen(!isPopupOpen);

  const handleSubmit = (e) => {
    e.preventDefault();
    setSearchParams({
      page: "1",
      category,
      priceSort,
      stockStatus,
    });
    setIsPopupOpen(false);
  };

  const bgVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 1.2, ease: "easeInOut" } },
  };
  const containerVariants = {
    hidden: { opacity: 0, y: -30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, staggerChildren: 0.15 },
    },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, ease: "easeOut" },
    },
  };
  const buttonVariants = {
    hover: {
      scale: 1.05,
      boxShadow: "0px 6px 15px rgba(0, 0, 0, 0.15)",
      transition: { type: "spring", stiffness: 300, damping: 20 },
    },
  };

  if (isLoading) return <Loader />;
  if (error)
    return (
      <Box textAlign="center" fontSize="lg" color="red.600" py={16}>
        Erreur, réessayez plus tard
      </Box>
    );

  return (
    <Box minH="100vh" bg="background">
      <motion.header variants={bgVariants} initial="hidden" animate="visible">
        <Box
          px={{ base: 4, sm: 6, lg: 12 }}
          py={{ base: 20, sm: 24 }}
          position="relative"
          style={{
            backgroundImage: `url('https://images.unsplash.com/photo-1556306535-0f09a537f0a3?q=80&w=1471&auto=format&fit=crop&ixlib=rb-4.0.3')`,
            backgroundSize: "cover",
            backgroundPosition: "center",
            backgroundBlendMode: "overlay",
            minHeight: "70vh",
            display: "flex",
            alignItems: "center",
          }}
          className="bg-accent/40"
        >
          <Box position="absolute" inset={0} bg="blackAlpha.700" zIndex={0} />
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="w-full max-w-6xl mx-auto text-center"
          >
            <Box
              position="relative"
              zIndex={1}
              w={"full"}
              mx="auto"
              textAlign={{ base: "center", sm: "left" }}
            >
              <motion.div variants={itemVariants}>
                <Heading
                  fontSize={{ base: "4xl", sm: "5xl", lg: "6xl" }}
                  fontWeight="bold"
                  className="text-secondary"
                  fontFamily="Playfair Display"
                >
                  Collection Lunettes
                </Heading>
              </motion.div>
              <motion.div variants={itemVariants}>
                <Text
                  mt={4}
                  fontSize={{ base: "lg", sm: "xl" }}
                  color="gray.200"
                >
                  Découvrez notre sélection exceptionnelle de lunettes pour tous les styles.
                </Text>
              </motion.div>
              <motion.div variants={itemVariants}>
                <Flex
                  mt={8}
                  direction={{ base: "column", sm: "row" }}
                  justify="space-between"
                  align="center"
                  w={"full"}
                  gap={{ base: 4, sm: 6 }}
                >
                  <motion.button variants={buttonVariants} whileHover="hover">
                    <Button
                      w={{ base: "full", sm: "auto" }}
                      px={6}
                      py={3}
                      className="bg-accent text-primary"
                      rounded="lg"
                      fontWeight="medium"
                      fontSize={{ base: "sm", sm: "md" }}
                      boxShadow="md"
                      onClick={togglePopup}
                    >
                      Filtres{" "}
                      <Box as="span" ml={2}>
                        ▼
                      </Box>
                    </Button>
                  </motion.button>
                  <Text
                    fontSize={{ base: "sm", sm: "md" }}
                    color="white"
                    fontWeight="medium"
                  >
                    Articles: {Math.min(currentPage * 8, totalProducts)} /{" "}
                    {totalProducts}
                  </Text>
                </Flex>
              </motion.div>
            </Box>
          </motion.div>
        </Box>
      </motion.header>

      {isPopupOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          style={{
            position: "fixed",
            inset: 0,
            backgroundColor: "rgba(0,0,0,0.8)",
            zIndex: 50,
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            padding: "1rem",
          }}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            style={{
              backgroundColor: "var(--chakra-colors-card)",
              padding: useBreakpointValue({ base: "1.5rem", sm: "2rem" }),
              borderRadius: "1rem",
              boxShadow: "2xl",
              width: "100%",
              maxWidth: useBreakpointValue({ base: "md", sm: "lg" }),
              position: "relative",
              maxHeight: "90vh",
              overflowY: "auto",
            }}
          >
            <Button
              onClick={togglePopup}
              position="absolute"
              top={4}
              right={4}
              variant="ghost"
              fontSize="2xl"
              color="gray.700"
              _hover={{ color: "accent" }}
            >
              ×
            </Button>
            <Heading
              fontSize={{ base: "2xl", sm: "3xl" }}
              mb={6}
              fontWeight="semibold"
              color="foreground"
              fontFamily="Playfair Display"
            >
              Affiner Votre Sélection
            </Heading>
            <form onSubmit={handleSubmit}>
              <Filters
                category={category}
                setCategory={setCategory}
                priceSort={priceSort}
                setPriceSort={setPriceSort}
                availability={stockStatus}
                setAvailability={setStockStatus}
              />
              <Button
                type="submit"
                w="full"
                mt={6}
                px={6}
                py={3}
                bg="accent"
                color="primary"
                rounded="lg"
                fontWeight="medium"
                fontSize={{ base: "sm", sm: "md" }}
                _hover={{ bg: "accent", opacity: 0.9 }}
              >
                Appliquer les Filtres
              </Button>
            </form>
          </motion.div>
        </motion.div>
      )}

      <Box
        mx="auto"
        px={{ base: 4, sm: 6 }}
        py={{ base: 12, sm: 16 }}
        className="bg-slate-800"
      >
        {products.length === 0 ? (
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <Text
              textAlign="center"
              fontSize={{ base: "lg", sm: "xl" }}
              color="gray.500"
              py={16}
            >
              Aucun article trouvé
            </Text>
          </motion.div>
        ) : (
          <motion.div
            variants={{
              hidden: { opacity: 0 },
              visible: { opacity: 1, transition: { staggerChildren: 0.15 } },
            }}
            initial="hidden"
            animate="visible"
          >
            <Grid
              templateColumns={{
                base: "repeat(2, 1fr)",
                md: "repeat(3, 1fr)",
                lg: "repeat(4, 1fr)",
              }}
              gap={{ base: 4, sm: 8 }}
            >
              {products.map((product) => (
                <Card key={product.id} product={product} />
              ))}
            </Grid>
          </motion.div>
        )}
      </Box>

      <Box mx="auto" px={{ base: 4, sm: 6 }} className="bg-slate-800">
        <Pagination
          currentPage={currentPage}
          setCurrentPage={(page) =>
            setSearchParams({
              page: page.toString(),
              category,
              priceSort,
              stockStatus,
            })
          }
          totalPages={totalPages}
          topRef={topRef}
        />
      </Box>
    </Box>
  );
};

export default ProductsList;import {
  Box,
  Text,
  Heading,
  Flex,
  Button,
  Grid,
  useBreakpointValue,
} from "@chakra-ui/react";
import Card from "./Card";
import Loader from "./Loader";
import Pagination from "./Pagination";
import Filters from "./Filters";

import { sampleGlassesProducts } from "./sampleClothingProducts"; // Move your products to a separate file or keep it inline

const ProductsList = () => {
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [category, setCategory] = useState("");
  const [priceSort, setPriceSort] = useState("");
  const [stockStatus, setStockStatus] = useState("");
  const [products, setProducts] = useState([]);
  const [totalPages, setTotalPages] = useState(0);
  const [totalProducts, setTotalProducts] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const topRef = useRef(null);

  const currentPage = parseInt(searchParams.get("page") || "1");

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, [currentPage]);

  const fetchStaticProducts = () => {
    setIsLoading(true);
    let filteredProducts = [...sampleGlassesProducts];
    if (category)
      filteredProducts = filteredProducts.filter(
        (p) => p.category === category.toLowerCase()
      );
    if (stockStatus)
      filteredProducts = filteredProducts.filter(
        (p) => p.stockStatus === stockStatus
      );
    if (priceSort === "asc") filteredProducts.sort((a, b) => a.price - b.price);
    else if (priceSort === "desc")
      filteredProducts.sort((a, b) => b.price - a.price);
    const itemsPerPage = 8;
    const startIndex = (currentPage - 1) * itemsPerPage;
    const paginatedProducts = filteredProducts.slice(
      startIndex,
      startIndex + itemsPerPage
    );
    setProducts(paginatedProducts);
    setTotalProducts(filteredProducts.length);
    setTotalPages(Math.ceil(filteredProducts.length / itemsPerPage));
    setIsLoading(false);
  };

  useEffect(() => {
    fetchStaticProducts();
  }, [currentPage, category, priceSort, stockStatus]);

  const togglePopup = () => setIsPopupOpen(!isPopupOpen);

  const handleSubmit = (e) => {
    e.preventDefault();
    setSearchParams({
      page: "1",
      category,
      priceSort,
      stockStatus,
    });
    setIsPopupOpen(false);
  };

  const bgVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 1.2, ease: "easeInOut" } },
  };
  const containerVariants = {
    hidden: { opacity: 0, y: -30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, staggerChildren: 0.15 },
    },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, ease: "easeOut" },
    },
  };
  const buttonVariants = {
    hover: {
      scale: 1.05,
      boxShadow: "0px 6px 15px rgba(0, 0, 0, 0.15)",
      transition: { type: "spring", stiffness: 300, damping: 20 },
    },
  };

  if (isLoading) return <Loader />;
  if (error)
    return (
      <Box textAlign="center" fontSize="lg" color="red.600" py={16}>
        Erreur, réessayez plus tard
      </Box>
    );

  return (
    <Box minH="100vh" bg="background">
      <motion.header variants={bgVariants} initial="hidden" animate="visible">
        <Box
          px={{ base: 4, sm: 6, lg: 12 }}
          py={{ base: 20, sm: 24 }}
          
          position="relative"
          style={{
            backgroundImage: `url('https://images.unsplash.com/photo-1556306535-0f09a537f0a3?q=80&w=1471&auto=format&fit=crop&ixlib=rb-4.0.3')`,
            backgroundSize: "cover",
            backgroundPosition: "center",
            backgroundBlendMode: "overlay",
            minHeight: "70vh",
            display: "flex",
            alignItems: "center",
          }}
          className="bg-accent/40"
        >
          <Box position="absolute" inset={0} bg="blackAlpha.700" zIndex={0} />
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="w-full max-w-6xl mx-auto text-center"
          >
            <Box
              position="relative"
              zIndex={1}
              w={"full"}
              mx="auto"
              textAlign={{ base: "center", sm: "left" }}
            >
              <motion.div variants={itemVariants}>
                <Heading
                  fontSize={{ base: "4xl", sm: "5xl", lg: "6xl" }}
                  fontWeight="bold"
                  className="text-secondary"
                  fontFamily="Playfair Display"
                >
                  Collection Lunettes
                </Heading>
              </motion.div>
              <motion.div variants={itemVariants}>
                <Text
                  mt={4}
                  fontSize={{ base: "lg", sm: "xl" }}
                  color="gray.200"
                >
                  Découvrez l’élégance intemporelle de nos créations.
                </Text>
              </motion.div>
              <motion.div variants={itemVariants}>
                <Flex
                  mt={8}
                  direction={{ base: "column", sm: "row" }}
                  justify="space-between"
                  align="center"
                  w={"full"}
                  gap={{ base: 4, sm: 6 }}
                >
                  <motion.button variants={buttonVariants} whileHover="hover">
                    <Button
                      w={{ base: "full", sm: "auto" }}
                      px={6}
                      py={3}
                      
                      className="bg-accent text-primary"
                      rounded="lg"
                      fontWeight="medium"
                      fontSize={{ base: "sm", sm: "md" }}
                      boxShadow="md"
                      onClick={togglePopup}
                    >
                      Filtres{" "}
                      <Box as="span" ml={2}>
                        ▼
                      </Box>
                    </Button>
                  </motion.button>
                  <Text
                    fontSize={{ base: "sm", sm: "md" }}
                    color="white"
                    fontWeight="medium"
                  >
                    Articles: {Math.min(currentPage * 8, totalProducts)} /{" "}
                    {totalProducts}
                  </Text>
                </Flex>
              </motion.div>
            </Box>
          </motion.div>
        </Box>
      </motion.header>

      {isPopupOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          style={{
            position: "fixed",
            inset: 0,
            backgroundColor: "rgba(0,0,0,0.8)",
            zIndex: 50,
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            padding: "1rem",
          }}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            style={{
              backgroundColor: "var(--chakra-colors-card)",
              padding: useBreakpointValue({ base: "1.5rem", sm: "2rem" }),
              borderRadius: "1rem",
              boxShadow: "2xl",
              width: "100%",
              maxWidth: useBreakpointValue({ base: "md", sm: "lg" }),
              position: "relative",
              maxHeight: "90vh",
              overflowY: "auto",
            }}
          >
            <Button
              onClick={togglePopup}
              position="absolute"
              top={4}
              right={4}
              variant="ghost"
              fontSize="2xl"
              color="gray.700"
              _hover={{ color: "accent" }}
            >
              ×
            </Button>
            <Heading
              fontSize={{ base: "2xl", sm: "3xl" }}
              mb={6}
              fontWeight="semibold"
              color="foreground"
              fontFamily="Playfair Display"
            >
              Affiner Votre Sélection
            </Heading>
            <form onSubmit={handleSubmit}>
              <Filters
                category={category}
                setCategory={setCategory}
                priceSort={priceSort}
                setPriceSort={setPriceSort}
                stockStatus={stockStatus}
                setStockStatus={setStockStatus}
              />
              <Button
                type="submit"
                w="full"
                mt={6}
                px={6}
                py={3}
                bg="accent"
                color="primary"
                rounded="lg"
                fontWeight="medium"
                fontSize={{ base: "sm", sm: "md" }}
                _hover={{ bg: "accent", opacity: 0.9 }}
              >
                Appliquer les Filtres
              </Button>
            </form>
          </motion.div>
        </motion.div>
      )}

      <Box
        
        mx="auto"
        px={{ base: 4, sm: 6 }}
        py={{ base: 12, sm: 16 }}
        className="bg-slate-800"
      >
        {products.length === 0 ? (
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <Text
              textAlign="center"
              fontSize={{ base: "lg", sm: "xl" }}
              color="gray.500"
              py={16}
            >
              Aucun article trouvé
            </Text>
          </motion.div>
        ) : (
          <motion.div
            variants={{
              hidden: { opacity: 0 },
              visible: { opacity: 1, transition: { staggerChildren: 0.15 } },
            }}
            initial="hidden"
            animate="visible"
            
          >
            <Grid
              templateColumns={{
                base: "repeat(2, 1fr)",
                md: "repeat(3, 1fr)",
                lg: "repeat(4, 1fr)",
              }}
              className=""
              gap={{ base: 4, sm: 8 }}
            >
              {products.map((product) => (
                <Card key={product.id} product={product} />
              ))}
            </Grid>
          </motion.div>
        )}
      </Box>

      <Box mx="auto" px={{ base: 4, sm: 6 }} className="bg-slate-800">
        <Pagination
          currentPage={currentPage}
          setCurrentPage={(page) =>
            setSearchParams({
              page: page.toString(),
              category,
              priceSort,
              stockStatus,
            })
          }
          totalPages={totalPages}
          topRef={topRef}
        />
      </Box>
    </Box>
  );
};

export default ProductsList;
